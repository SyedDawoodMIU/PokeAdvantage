@startuml

!define RECTANGLE class
!define ABSTRACT abstract class

' =========================== Namespaces ===========================

package "PokemonAdvantage" {

    ' =========================== Core Classes ===========================
    
    RECTANGLE Program {
        +static async Task Main(string[] args)
        -static void ConfigureServices(IServiceCollection services, IConfigurationRoot _configuration)
    }
    
    RECTANGLE ProgramEntry {
        -PokemonContext _pokemonContext
        -List<IObserver> _observers
        -List<string> _failedTypes
        +async Task RunAsync()
        -void SetupLogging()
        -string? GetUserInput()
        -async Task<bool> FetchAndAdaptPokemonData(string pokemonName)
        -async Task<bool> FetchAndAdaptTypeData(string type)
        -void AddToFailedTypes(string failedType)
        -void ApplyBusinessLogic()
        +void AttachObserver(IObserver observer)
        +void DetachObserver(IObserver observer)
        +void NotifyObservers()
    }
    
   
    
    
    package "PokemonAdvantage.Interfaces" {
      INTERFACE IApiService {
        +Task<string> Fetch(string url)
    } 
    
    INTERFACE IDamageCalculator {
        +void CalculateDamage(PokemonContext pokemonContext)
    }
    
    INTERFACE IErrorHandler {
        +void HandleError(Exception ex)
    }
    
    INTERFACE IJsonHelper {
        +T Deserialize<T>(string json)
    }
    
    INTERFACE IObserver {
        +void Update(PokemonContext pokemonContext)
    }
    
    INTERFACE IPokemonApiClient {
        +Task<string> GetPokemonAsync(string pokemonName)
        +Task<string> GetTypeRelationsAsync(string typeName)
    }
    
    INTERFACE IPokemonApiManager {
        +Task<PokemonDTO?> FetchPokemonData(string pokemonName)
        +Task<TypeRelationsDTO> FetchTypeRelationsAsync(string type)
    }
    
    INTERFACE IPokemonBusinessLogic {
        +void ApplyPokemonStrategy(PokemonContext context)
    }
    
    INTERFACE IPokemonDataAdapter {
        +Pokemon AdaptPokemon(PokemonDTO apiPokemon)
        +TypeRelations AdaptTypeRelations(TypeRelationsDTO dto)
    }
    
    INTERFACE IPokemonStrategy {
        +void Execute(PokemonContext context)
    }
    
    INTERFACE ISingletonHttpClient {
        +HttpClient Instance {get;}
    }
    
    INTERFACE ISubject {
        +void AttachObserver(IObserver observer)
        +void DetachObserver(IObserver observer)
        +void NotifyObservers()
    }
    
    INTERFACE IUserInputManager {
        +string GetPokemonName()
    }

      INTERFACE ILogger {
        +void LogInformation(string message)
        +void LogWarning(string message)
        +void LogError(string message)
        +void SetLogLevel(LogLevel logLevel)
    }
    }
    

    

Program --> IServiceCollection
Program --> IConfigurationRoot
Program --> IServiceProvider
Program --> ProgramEntry
ProgramEntry --> ISubject
ProgramEntry --> IUserInputManager
ProgramEntry --> IPokemonApiManager
ProgramEntry --> IPokemonDataAdapter
ProgramEntry --> IPokemonBusinessLogic
ProgramEntry --> ILogger
ProgramEntry --> ConsoleObserver
SingletonHttpClient --> ISingletonHttpClient
NewtonSoftJsonHelper --> IJsonHelper
ApiService --> IApiService
PokemonApiClient --> IPokemonApiClient
PokemonApiManager --> IPokemonApiManager
BasicDamageCalculator --> IDamageCalculator
PokemonBusinessLogic --> IPokemonBusinessLogic
ConsoleInputManager --> IUserInputManager
PokemonAdapter --> IPokemonDataAdapter
ConsoleErrorHandler --> IErrorHandler
ConsoleLogger --> ILogger
ConsoleObserver --> IObserver
CalculatePowerStrategy --> IPokemonStrategy
}
@enduml

