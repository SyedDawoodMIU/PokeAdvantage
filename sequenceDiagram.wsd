@startuml

participant "ProgramEntry:ProgramEntry" as ProgramEntry
participant "Logger:ILogger" as Logger
participant "InputManager:IUserInputManager" as InputManager
participant "ApiManager:IPokemonApiManager" as ApiManager
participant "DataAdapter:IPokemonDataAdapter" as DataAdapter
participant "BusinessLogic:IPokemonBusinessLogic" as BusinessLogic
participant "ErrorHandler:IErrorHandler" as ErrorHandler

ProgramEntry -> Logger: LogInformation("Starting PokeAdvantage")
ProgramEntry -> InputManager: GetPokemonName()
InputManager --> ProgramEntry: pokemonName

alt pokemonName is null or empty
    ProgramEntry -> ErrorHandler: HandleError(Exception)
else pokemonName is valid
    ProgramEntry -> ApiManager: FetchPokemonData(pokemonName)
    ApiManager --> ProgramEntry: apiPokemon
    
    alt apiPokemon is null
        ProgramEntry -> ErrorHandler: HandleError(Exception)
    else apiPokemon is valid
        ProgramEntry -> DataAdapter: AdaptPokemon(apiPokemon)
        DataAdapter --> ProgramEntry: Adapted Data
        loop for each type in Adapted Data
            ProgramEntry -> ApiManager: FetchTypeData(type)
            ApiManager --> ProgramEntry: typeRelations
            alt typeRelations is null
                ProgramEntry -> ErrorHandler: HandleError(Exception)
            else typeRelations is valid
                ProgramEntry -> DataAdapter: AdaptType(typeRelations)
                DataAdapter --> ProgramEntry: Adapted Type
                ProgramEntry -> BusinessLogic: ApplyPokemonStrategy(context)
                ProgramEntry -> ProgramEntry: NotifyObservers()
            end
        end
    end
end

ProgramEntry -> Logger: LogInformation("Ending PokeAdvantage")

@enduml
